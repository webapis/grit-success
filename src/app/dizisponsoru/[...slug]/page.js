import SearchResultContainer from '@/app/dizisponsoru/comp/SearchResultContainer';
import PaginationContainer from '@/app/dizisponsoru/comp/PaginationContainer';
import Fuse from 'fuse.js';
import keywordMetaData from '@/app/dizisponsoru/keywordMetaData.json';
import pagesMetaData from '@/app/dizi/pageMetadata.json';
import pagesData from '@/app/dizi/dizisponsoru.json';
import deaccent from './deaccent';

const keywordsCounter = countItemsByKeyword({ pagesMetaData, keywordMetaData });

// 1. Add route segment config for static generation
export const dynamic = 'force-static'
export const dynamicParams = false // Prevent dynamic params that aren't generated by generateStaticParams

// 2. Optimize metadata generation
export function generateMetadata({ params }) {
    const dizi = params.slug[0];
    const keyword = params.slug[1];

    const keywordObj = keywordMetaData.find(f => f.keyword === keyword);
    const pageObj = pagesMetaData.find(f => {
        const current = deaccent(f.dizi).replaceAll(' ', '-').toLowerCase();
        return current === dizi;
    });

    const title = `${pageObj.dizi} Dizisi ${keywordObj.keywordTitle} Sponsorları`;
    const description = `${pageObj.dizi} dizisinin ${keywordObj.keywordTitle.toLowerCase()} sponsorları ve ürünleri hakkında detaylı bilgi.`;
    
    return {
        title,
        description,
        openGraph: {
            title,
            description,
        },
        alternates: {
            canonical: `/dizisponsoru/${dizi}/${keyword}`
        }
    };
}

// 3. Move Fuse options outside to prevent recreation during build
const fuseOptions = {
    keys: ['ServiceName', 'TVSeriesTitle', 'Tag', 'Name', 'Acyklama'],
    minMatchCharLength: 4,
    threshold: 0.0,
};

// 4. Optimize the main component
export default function DiziSponsoru({ params }) {
    const dizi = params.slug[0];
    const keyword = params.slug[1];
    const page = parseInt(params.slug[3]) || 1;

    // Get page and keyword objects - move these to build time if possible
    const pageObj = pagesMetaData.find(f => {
        const current = deaccent(f.dizi).replaceAll(' ', '-').toLowerCase();
        return current === dizi;
    });

    const keywordObj = keywordMetaData.find(f => f.keyword === keyword);
    
    // Filter results
    const resultSimple = pagesData.filter((f) => 
        f.tag === pageObj.slug.replace('-dizi-sponsorlari', '')
    );

    // Only create Fuse instance if needed
    const results = keywordObj.or 
        ? new Fuse(resultSimple, fuseOptions).search({ "$and": [keywordObj.or] }).map(m => ({ ...m.item })) 
        : resultSimple;

    const paginatedData = paginate(results, page, 50);
    const pageCount = Math.ceil(results.length / 50);

    return (
        <main className="min-h-screen py-8">
            <SearchResultContainer 
                totalItems={resultSimple.length} 
                keywordsCounter={keywordsCounter.filter(f => f.dizi === dizi)} 
                data={paginatedData} 
                pageTitle={`${pageObj.dizi} Dizisi ${keywordObj.keywordTitle} Sponsorları`} 
                dizi={dizi} 
                page={page} 
                keyword={keyword} 
            />
            <PaginationContainer 
                count={pageCount} 
                page={page} 
                url={`/dizisponsoru/${dizi}/${keyword}/sayfa/`} 
            />
        </main>
    );
}

// 5. Optimize generateStaticParams for build time
export function generateStaticParams() {
    const pageCandidates = pagesMetaData.flatMap(pageObj => 
        keywordMetaData.map(keywordObj => {
            const resultSimple = pagesData.filter(
                f => f.tag === pageObj.slug.replace('-dizi-sponsorlari', '')
            );
            
            const results = keywordObj.or 
                ? new Fuse(resultSimple, fuseOptions).search({ "$and": [keywordObj.or] }).map(m => ({ ...m.item })) 
                : resultSimple;

            return {
                dizi: pageObj.dizi,
                keyword: keywordObj.keyword,
                pageCount: Math.ceil(results.length / 50)
            };
        })
    );

    return flattenArrayByPageCount(pageCandidates).map(({ dizi, keyword, page }) => ({
        slug: [
            deaccent(dizi).toLowerCase().replaceAll(' ', '-'),
            keyword,
            'sayfa',
            page.toString()
        ],
    }));
}

function paginate(array, page, pageSize) {
    --page; // Adjusting to zero-based index
    const startIndex = page * pageSize;
    return array.slice(startIndex, startIndex + pageSize);
}

function flattenArrayByPageCount(arrayOfObjects) {
    return arrayOfObjects.flatMap(({ dizi, pageCount, keyword }) =>
        Array.from({ length: pageCount }, (_, index) => ({
            dizi,
            keyword,
            page: index + 1,
        }))
    );
}

export function countItemsByKeyword({ pagesMetaData, keywordMetaData }) {
    const candidateKeywords = [];

    for (let pageObj of pagesMetaData) {
        for (let keywordObj of keywordMetaData) {
            const resultSimple = pagesData.filter((f) => f.tag === pageObj.slug.replace('-dizi-sponsorlari', ''));
            const fuse = new Fuse(resultSimple, {
                keys: ['ServiceName', 'TVSeriesTitle', 'Tag', 'Name', 'Acyklama'],
                minMatchCharLength: 4,
                threshold: 0.0,
            });

            let results = keywordObj.or ? fuse.search({ "$and": [keywordObj.or] }).map(m => ({ ...m.item })) : resultSimple;

            candidateKeywords.push({
                dizi: pageObj.slug.replace('-dizi-sponsorlari', ''),
                keyword: keywordObj.keyword,
                count: results.length,
                keywordTitle: keywordObj.keywordTitle,
            });
        }
    }

    return candidateKeywords;
}