import SearchResultContainer from '@/app/dizisponsoru/comp/SearchResultContainer';
import PaginationContainer from '@/app/dizisponsoru/comp/PaginationContainer';
import Fuse from 'fuse.js';
import keywordMetaData from '@/app/dizisponsoru/keywordMetaData.json';
import pagesMetaData from '@/app/dizi/pageMetadata.json';
import pagesData from '@/app/dizi/dizisponsoru.json';
import deaccent from './deaccent';

// Route segment config for static generation
export const dynamic = 'force-static';
export const dynamicParams = false; // Prevent dynamic params that aren't generated by generateStaticParams

// Fuse.js options
const fuseOptions = {
    keys: ['ServiceName', 'TVSeriesTitle', 'Tag', 'Name', 'Acyklama'],
    minMatchCharLength: 4,
    threshold: 0.0,
};

// Utility functions and caches
const slugCache = new Map();
const memoizedPageData = new Map();
const fuseInstances = new Map();

function getProcessedSlug(dizi) {
    if (!slugCache.has(dizi)) {
        slugCache.set(dizi, deaccent(dizi).replaceAll(' ', '-').toLowerCase());
    }
    return slugCache.get(dizi);
}

function getPageData(slug) {
    if (!memoizedPageData.has(slug)) {
        memoizedPageData.set(
            slug,
            pagesData.filter((f) => f.tag === slug.replace('-dizi-sponsorlari', ''))
        );
    }
    return memoizedPageData.get(slug);
}

function getFuseInstance(data) {
    const key = JSON.stringify(data);
    if (!fuseInstances.has(key)) {
        fuseInstances.set(key, new Fuse(data, fuseOptions));
    }
    return fuseInstances.get(key);
}

function paginate(array, page, pageSize) {
    --page; // Adjusting to zero-based index
    const startIndex = page * pageSize;
    return array.slice(startIndex, startIndex + pageSize);
}

function flattenArrayByPageCount(arrayOfObjects) {
    return arrayOfObjects.flatMap(({ dizi, pageCount, keyword }) =>
        Array.from({ length: pageCount }, (_, index) => ({
            dizi,
            keyword,
            page: index + 1,
        }))
    );
}

// Data processing functions
export function countItemsByKeyword({ pagesMetaData, keywordMetaData }) {
    return pagesMetaData.flatMap(pageObj => {
        const resultSimple = getPageData(pageObj.slug);
        const fuse = getFuseInstance(resultSimple);
        
        return keywordMetaData.map(keywordObj => {
            const results = keywordObj.or 
                ? fuse.search({ "$and": [keywordObj.or] }).map(m => ({ ...m.item }))
                : resultSimple;

            return {
                dizi: pageObj.slug.replace('-dizi-sponsorlari', ''),
                keyword: keywordObj.keyword,
                count: results.length,
                keywordTitle: keywordObj.keywordTitle,
            };
        });
    });
}

// Initialize counters
const keywordsCounter = countItemsByKeyword({ pagesMetaData, keywordMetaData });

// Metadata generation
export function generateMetadata({ params }) {
    const dizi = params.slug[0];
    const keyword = params.slug[1];

    const keywordObj = keywordMetaData.find(f => f.keyword === keyword);
    const pageObj = pagesMetaData.find(f => {
        const current = getProcessedSlug(f.dizi);
        return current === dizi;
    });

    const title = `${pageObj.dizi} Dizisi ${keywordObj.keywordTitle} Sponsorları`;
    const description = `${pageObj.dizi} dizisinin ${keywordObj.keywordTitle.toLowerCase()} sponsorları ve ürünleri hakkında detaylı bilgi.`;
    
    return {
        title,
        description,
        openGraph: {
            title,
            description,
        },
        alternates: {
            canonical: `/dizisponsoru/${dizi}/${keyword}`
        }
    };
}

// Main component
export default function DiziSponsoru({ params }) {
    const dizi = params.slug[0];
    const keyword = params.slug[1];
    const page = parseInt(params.slug[3]) || 1;

    const pageObj = pagesMetaData.find(f => {
        const current = getProcessedSlug(f.dizi);
        return current === dizi;
    });

    const keywordObj = keywordMetaData.find(f => f.keyword === keyword);
    const resultSimple = getPageData(pageObj.slug);

    const results = keywordObj.or 
        ? getFuseInstance(resultSimple).search({ "$and": [keywordObj.or] }).map(m => ({ ...m.item }))
        : resultSimple;

    const paginatedData = paginate(results, page, 50);
    const pageCount = Math.ceil(results.length / 50);

    return (
        <main className="min-h-screen py-8">
            <SearchResultContainer 
                totalItems={resultSimple.length} 
                keywordsCounter={keywordsCounter.filter(f => f.dizi === dizi)} 
                data={paginatedData} 
                pageTitle={`${pageObj.dizi} Dizisi ${keywordObj.keywordTitle} Sponsorları`} 
                dizi={dizi} 
                page={page} 
                keyword={keyword} 
            />
            <PaginationContainer 
                count={pageCount} 
                page={page} 
                url={`/dizisponsoru/${dizi}/${keyword}/sayfa/`} 
            />
        </main>
    );
}

// Static params generation
export function generateStaticParams() {
    const pageCandidates = pagesMetaData.flatMap(pageObj => {
        const resultSimple = getPageData(pageObj.slug);
        const fuse = getFuseInstance(resultSimple);
        
        return keywordMetaData.map(keywordObj => {
            const results = keywordObj.or 
                ? fuse.search({ "$and": [keywordObj.or] }).map(m => ({ ...m.item }))
                : resultSimple;

            return {
                dizi: pageObj.dizi,
                keyword: keywordObj.keyword,
                pageCount: Math.ceil(results.length / 50)
            };
        });
    });

    return flattenArrayByPageCount(pageCandidates).map(({ dizi, keyword, page }) => ({
        slug: [
            getProcessedSlug(dizi),
            keyword,
            'sayfa',
            page.toString()
        ],
    }));
}